#!/usr/bin/python
'''
move all files from */year/month/day/file to a single folder
and rename the file as year-month-day-file
'''
import os
import re
import shutil
import sys
import subprocess
from optparse import OptionParser

reg_obj=re.compile(r".*/(200.)/([0-9]+)/([0-9]+)")

def execBash(cmd, is_suppress=False):
	print cmd
	p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
	#(stdoutdata, stderrdata) = p.communicate()
	stdoutdata = p.communicate()[0]
	p.poll()
	if (p.returncode != 0) and (not is_suppress):
		print ("\033[1;31mWarning!! command (%s) not ended properly."
				"exit status = %d\033[0m" %(cmd, p.returncode))
	#out = p.stdout.read()
	#print out
	return (stdoutdata, p.returncode)



def parseCmd():
	usage = "usage: %prog [options] <startBranch>..<endBranch> <branch1> <branch2> [<branch3>]"
	parser = OptionParser(usage)
	parser.add_option("-s", "--simple-rename", dest="is_simple_rename",
			action="store_true", default=False,
			help="simple rename only");
	parser.add_option("-d", "--start-number",action="store", type="int",
			dest="start_number",
			help="start number/index of filename")
	parser.add_option("-m", "--match_str",action="store", type="string",
			dest="match_str",
			help="only rename matched string")
	return parser.parse_args()


def renamefiles(result, root, files):
	year=result.group(1)
	month=result.group(2)
	day=result.group(3)
	#print ("%s, %s, %s"%(result.group(1),result.group(2),result.group(3)))
	for file in files:
		filename="sai2004/%s-%s-%s-%s" % (year, month, day, file)
		#print filename
		cmd="cp " +root+ "/" +file+ " " +filename
		print cmd
		#shutil.copyfiles(file, filename)
		subprocess.call(cmd, shell=True)



#----------------- [ simpleRename ]----------------#
#  Example: Simeple rename
#  ------------------------------------------------------------
#  Current filename		----->	New filename
#  ------------------------------------------------------------
#  kkk001				----->	hoho001
#  kkk002				----->	hoho002
#
def simpleRename(files, newname, start_number):
	if start_number:
		index = start_number
	else:
		index = 001
	filename_arr = []
	print("-"*60)
	print("%-30s%10s  %s" % ("Current filename", " ","New filename"))
	print("-"*60)
	for file in files:
		## get file extension
		reg_ext=re.compile(r".*(\..*)")
		result=reg_ext.match(file)
		if result:
			#print result.group(1)
			newfilename = "%s%03d%s" % (newname, index, result.group(1))
		else:
			newfilename = "%s%03d" % (newname, index)

		## showing new filename
		cmd="%-30s%10s  %s" % (file, "----->", newfilename)
		index=index+1
		filename_arr.append([file, newfilename])
		print("%s" %(cmd,))

	should_apply = raw_input('\n\nProceed to apply new name? (y/n) ')
	if 'y' == should_apply.lower():
		for old, new in filename_arr:
			cmd = "mv '%s' '%s'" % (old, new)
			execBash(cmd)
			#print("old=%s, new=%s" % (old, new))

#----------------- [ main execution ]----------------#
def matchRename(files, match_str, args, start_number):
	reg_obj_new = re.compile(r"%s" % match_str)
	match_files = []
	for file in files:
		match_line = reg_obj_new.match(file)
		if match_line:
			match_files.append(file)
	simpleRename(match_files, args, start_number)


#----------------- [ main execution ]----------------#
# need absolute path for os.walk
# walk into each sub-directoaries under current directory
for root, dirs, files in os.walk(os.getcwd()):
	#print("root=%s, files=%s" %(root, files,))
	#result=reg_obj.match(root)
	#if result:
	#	renamefiles(result, root, files)

	(options, args) = parseCmd()
	#print("args = %s " % (args,))

	if args == []:
		print ("need to specify the new file.")
		sys.exit(0)

	if options.is_simple_rename:
		simpleRename(sorted(files), args[0], options.start_number)

	if options.match_str:
		matchRename(sorted(files), options.match_str, args[0], options.start_number)

